#!/usr/bin/perl


use warnings;
use Net::IP::Match::XS;


#TBD
#Uc bilgileri ve ilgili IP adresleri dosyadan okunup arraylere aktarılacak

#hash of hash storing network info
my $ucInfo;

#hash of hash storing malware info
my $malInfo;

sub parseUcNetworks {

	my($filename) = @_;

	open(FILE,$filename) or die "could not open the file";

	while (<FILE>) {
		
		chomp;
	
		#split by #
		($ucAdi,$ucNetwork) = split("\t");
		
		#print "ucadi: ".$ucAdi."\n";
		#print "ucnetwork: ".$ucNetwork."\n";
		
		$ucAdiSize = scalar(keys %{$ucInfo{$ucAdi}});
		#print "ucAdiSize: ".$ucAdiSize."\n";
		$ucInfo{$ucAdi}{$ucAdiSize}=$ucNetwork;
		
		#print "ucInfo{".$ucAdi."}{".$ucAdiSize."}=".$ucInfo{$ucAdi}{$ucAdiSize}."\n";
			
	}
	
	close(FILE);

}

sub addMalInfo {

	my($infoName,$info) = @_;

	if ( $malInfo{$malwareIP}{$infoName} ) {
		if ($malInfo{$malwareIP}{$infoName} =~ m/$info/) {
			#print 'match';
		} else {
			#print 'no match';
			$malInfo{$malwareIP}{$infoName}=$malInfo{$malwareIP}{$infoName}." ".$info;
		}
		#$malInfo{$malwareIP}{'Source'}=$malInfo{$malwareIP}{'Source'}." ".$sourceName;
	}
	else {
		$malInfo{$malwareIP}{$infoName}=$info;
	}

}

sub parseMalIPList {

	my($filename,$splitchar,$sourceName) = @_;
	#system ("wget -O malFile.tmp $filename");

	open(FILE,"malFile.tmp") or die "could not open the file";
	
	$skiplineindex=1;
	while (<FILE>) {
		
		chomp;
		
		#skip first 5 lines
		if ($skiplineindex < 6) {
			$skiplineindex++;
			next;
		}
	
		#split by splitchar, for abuse.ch #
		($malwareIP,$malwareAdi) = split($splitchar);
		
		#trim left and right space
		$malwareIP =~ s/^\s+//;
		$malwareIP =~ s/\s+$//;
		$malwareAdi =~ s/^\s+//;
		$malwareAdi =~ s/\s+$//;
		
		#print "ucadi: ".$ucAdi."\n";
		#print "ucnetwork: ".$ucNetwork."\n";
		
		#$malwareAdiSize = scalar(keys %{$malInfo{$malwareAdi}});
		#print "malwareAdiSize: ".$malwareAdiSize."\n";
		
		$malPort=' ';
		
		&addMalInfo('Type',$malwareAdi);
		&addMalInfo('Source',$sourceName);
		&addMalInfo('Port',$malPort);
		
		$malInfo{$malwareIP}{'Count'}=0;
		
		#if ( $malInfo{$malwareIP}{'Count'} ) {
		#	$malInfo{$malwareIP}{'Count'}++;
		#}
		#else {
		#	$malInfo{$malwareIP}{'Count'}=1;
		#}
		#$malInfo{$malwareIP}{'Count'} = $malInfo{$malwareIP}{'Count'}++;
		#$malInfo{$malwareIP}{'Port'}= $malInfo{$malwareIP}{'Port'}." ";
		
	}
	
	close(FILE);
	#system ("rm malFile.tmp");

}



sub searchForNetwork {

	$numberOfDetection=0;
	for $i ( keys %ucInfo ) {
		for $j ( keys %{$ucInfo{$i}} ) {
			for $k ( keys %malInfo ) {
				

        				#print "$k => $value1\n";
					#print "$i => $value2\n";
				
					if (match_ip( $k , $ucInfo{$i}{$j} )) {
						print "\n\n### Bad IP DETECTED!!!\n";
						print "Related Uc is ".$i."\n";
						print "Malicious IP: ".$k."\n";
						print "Port(s):".$malInfo{$k}{'Port'}."\n";
						print "Type(s): ".$malInfo{$k}{'Type'}."\n";
						print "Source(s): ".$malInfo{$k}{'Source'}."\n";
						print "Count: ".$malInfo{$k}{'Count'}."\n";
						$numberOfDetection++;
					}
					else {
						#print "Not detected \n";
					}
				
			}
		}
	}
	print "\n\n### ";
	print $numberOfDetection." IP's are found.\n";

}

&parseUcNetworks("ucInfo.txt");
&parseMalIPList("http://amada.abuse.ch/blocklist.php?download=ipblocklist","#","Abuse.ch");

### Görev 1: bizim IPlerimiz botnetlist IPleri arasında yer alıyor mu? ###

&searchForNetwork;









exit;

