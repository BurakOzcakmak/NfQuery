#!/usr/bin/perl

use warnings;
use Net::IP::Match::XS;


#TBD
#Uc bilgileri ve ilgili IP adresleri dosyadan okunup arraylere aktarılacak

#hash of hash storing network info
my $ucNetworkInfo;

#hash of hash storing malware info
my $malInfo;

#hash of hash storing uc IP info, i.e. IP's found after filtering the flow using malicious IPs, i.e.  IP addresses communicated with malicious IPs
my $ucIPInfo;

sub parseUcNetworks {

	my($filename) = @_;

	open(FILE,$filename) or die "could not open the file";

	while (<FILE>) {
		
		chomp;
	
		#split by #
		($ucID,$ucAdi,$ucNetwork) = split("\t");
		
		
		
		#get the number of stored uc networks for an uc (e.g. ULAKNET)
		$ucAdiSize = scalar(keys %{$ucNetworkInfo{$ucAdi}});
		
		$ucNetworkInfo{$ucAdi}{$ucAdiSize}=$ucNetwork;
		
		$ucNetworkInfo{$ucAdi}{'ID'}=$ucID;
			
	}
	
	close(FILE);

}

sub addMalInfo {

	my($infoName,$info) = @_;

	if ( $malInfo{$malwareIP}{$infoName} ) {
		if ($malInfo{$malwareIP}{$infoName} =~ m/$info/) {
			#match
		} else {
			#no match
			$malInfo{$malwareIP}{$infoName}=$malInfo{$malwareIP}{$infoName}." ".$info;
		}
	}
	else {
		$malInfo{$malwareIP}{$infoName}=$info;
	}

}

sub parseMalIPList {

	my($filename,$splitchar,$sourceName) = @_;
	system ("wget -O malFile.tmp $filename");

	open(FILE,"malFile.tmp") or die "could not open the file";
	
	$skiplineindex=1;
	while (<FILE>) {
		
		chomp;
		
		#skip first 5 lines
		if ($skiplineindex < 6) {
			$skiplineindex++;
			next;
		}
	
		#split by splitchar, for abuse.ch #
		($malwareIP,$malwareAdi) = split($splitchar);
		
		#trim left and right space
		$malwareIP =~ s/^\s+//;
		$malwareIP =~ s/\s+$//;
		$malwareAdi =~ s/^\s+//;
		$malwareAdi =~ s/\s+$//;
		
		
		#$malwareAdiSize = scalar(keys %{$malInfo{$malwareAdi}});
		
		$malPort=' ';
		
		&addMalInfo('Type',$malwareAdi);
		&addMalInfo('Source',$sourceName);
		&addMalInfo('Port',$malPort);
		
		$malInfo{$malwareIP}{'Count'}=0;
		
		#if ( $malInfo{$malwareIP}{'Count'} ) {
		#	$malInfo{$malwareIP}{'Count'}++;
		#}
		#else {
		#	$malInfo{$malwareIP}{'Count'}=1;
		#}
		#$malInfo{$malwareIP}{'Count'} = $malInfo{$malwareIP}{'Count'}++;
		#$malInfo{$malwareIP}{'Port'}= $malInfo{$malwareIP}{'Port'}." ";
		
	}
	
	close(FILE);
	
	#remove temp file
	#system ("rm malFile.tmp");
}



sub searchUcNetworksforMalIP {

	$numberOfDetection=0;
	for $i ( keys %ucNetworkInfo ) {
		for $j ( keys %{$ucNetworkInfo{$i}} ) {
			for $k ( keys %malInfo ) {
				
				if (match_ip( $k , $ucNetworkInfo{$i}{$j} )) {
					print "\n\n### Bad IP DETECTED!!!\n";
					print "Related Uc is ".$i."\n";
					print "Malicious IP: ".$k."\n";
					print "Port(s):".$malInfo{$k}{'Port'}."\n";
					print "Type(s): ".$malInfo{$k}{'Type'}."\n";
					print "Source(s): ".$malInfo{$k}{'Source'}."\n";
					print "Count: ".$malInfo{$k}{'Count'}."\n";
					$numberOfDetection++;
				}
				else {
					#Not detected
				}
				
			}
		}
	}
	print "\n\n### ";
	print $numberOfDetection." IP's are found.\n";

}

sub checkForNetwork {

	my($IP) = @_;
	
	$result="NoNetwork";
	
	FIRSTLOOP: for $tmp1 ( keys %ucNetworkInfo ) {
		for $tmp2 ( keys %{$ucNetworkInfo{$tmp1}} ) {
				#print "####".$tmp1."\n";
				if (match_ip( $IP , $ucNetworkInfo{$tmp1}{$tmp2} )) {
					$result=$tmp1;
					last FIRSTLOOP;
					last;
				}
				#else {
				#	$result="NoNetwork";
				#}
		}
	}
	##print "####".$ucNetworkInfo{'rehabilitasyon'}{0}."\n";

	$result;
}

sub populateucIPInfo_dst {

	open(WFILE, ">tmp.filter") or die "could not open file to write";
	print WFILE "src ip in [";
	for $k ( keys %malInfo ) {
	
		print WFILE " ".$k." ";

	}
	print WFILE "]";
	close(WFILE);
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%da' `;
	
	@result = `nfdump -R /home/emre/Desktop/22haziran_flow_analysis/data/ -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	for $i (1..$#result-4){
		
		$result[$i] =~ s/^\s+//;
		$result[$i] =~ s/\s+$//;
		#split
		($sa,$sp,$da,$dp) = split(/\|/,$result[$i]);

		#chomp $result[$i];
		$sa =~ s/^\s+//;
		$sa =~ s/\s+$//;
		$da =~ s/^\s+//;
		$da =~ s/\s+$//;
		$sp =~ s/^\s+//;
		$sp =~ s/\s+$//;
		$dp =~ s/^\s+//;
		$dp =~ s/\s+$//;
		
		##print "sa,sp = ".$sa.",".$sp."\n";
		
		#increase count for ucIP
		if ($ucIPInfo{$da}{'Count'}) {
			$ucIPInfo{$da}{'Count'}++;
		}
		else {
			$ucIPInfo{$da}{'Count'}=1;
		}
		
		#add ucIP port info
		if ($ucIPInfo{$da}{'Port'}) {
			if ($ucIPInfo{$da}{'Port'} =~ m/$dp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$da}{'Port'}=$ucIPInfo{$da}{'Port'}." ".$dp;
			}
			
		}
		else {
			$ucIPInfo{$da}{'Port'}=$dp;
		}
		
		#add communication with MalIP
		$temp='('.$dp.')'.$sa.'('.$sp.')';
		##print "############".$sasp."\n";
		if ($ucIPInfo{$da}{'MalIPPort'}) {
					
			if ($ucIPInfo{$da}{'MalIPPort'} =~ m/$temp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$da}{'MalIPPort'}=$ucIPInfo{$da}{'MalIPPort'}." ".$temp;
			}
			
		}
		else {
			$ucIPInfo{$da}{'MalIPPort'}=$temp;
		}
		
		#for $tmp1 ( keys %ucNetworkInfo ) {
		#	print "###".$tmp1."\n";
		#}
		
		$ucIPInfo{$da}{'Network'}= &checkForNetwork($da);
		
		#print $result[$i]." ";
	}
	
	
	#foreach $k (sort { $ucIPInfo{$a} cmp $ucIPInfo{$b} } keys %ucIPInfo) { print "$food is $food_color{$food}.\n"; }
	
	
	
	
	
	#for $k ( keys %ucIPInfo ){
		#print "##Record".$i."\n";
		#print "UcIP: \t\t".$k."\n";
		#print "Network: \t".$ucIPInfo{$k}{'Network'}."\n";
		#print "Port(s): \t".$ucIPInfo{$k}{'Port'}."\n";
		#print "MalIPPort: \t".$ucIPInfo{$k}{'MalIPPort'}."\n";
		#print "Count: \t".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "ucIPInfo{'".$k."'}{'Network'}= ".$ucIPInfo{$k}{'Network'}."\n";
		#print "ucIPInfo{'".$k."'}{'Port'}= ".$ucIPInfo{$k}{'Port'}."\n";
		#print "ucIPInfo{'".$k."'}{'MalIPPort'}= ".$ucIPInfo{$k}{'MalIPPort'}."\n";
		#print "ucIPInfo{'".$k."'}{'Count'}= ".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "\n";
		#$i++;
	#}
	
	#print "\n";

}

sub populateucIPInfo_src {

	open(WFILE, ">tmp.filter") or die "could not open file to write";
	print WFILE "dst ip in [";
	for $k ( keys %malInfo ) {
	
		print WFILE " ".$k." ";

	}
	print WFILE "]";
	close(WFILE);
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%da' `;
	
	@result = `nfdump -R /home/emre/Desktop/22haziran_flow_analysis/data/ -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	for $i (1..$#result-4){
		
		$result[$i] =~ s/^\s+//;
		$result[$i] =~ s/\s+$//;
		#split
		($sa,$sp,$da,$dp) = split(/\|/,$result[$i]);

		#chomp $result[$i];
		$sa =~ s/^\s+//;
		$sa =~ s/\s+$//;
		$da =~ s/^\s+//;
		$da =~ s/\s+$//;
		$sp =~ s/^\s+//;
		$sp =~ s/\s+$//;
		$dp =~ s/^\s+//;
		$dp =~ s/\s+$//;
		
		##print "sa,sp = ".$sa.",".$sp."\n";
		
		#increase count for ucIP
		if ($ucIPInfo{$sa}{'Count'}) {
			$ucIPInfo{$sa}{'Count'}++;
		}
		else {
			$ucIPInfo{$sa}{'Count'}=1;
		}
		
		#add ucIP port info
		if ($ucIPInfo{$sa}{'Port'}) {
			if ($ucIPInfo{$sa}{'Port'} =~ m/$sp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$sa}{'Port'}=$ucIPInfo{$sa}{'Port'}." ".$sp;
			}
			
		}
		else {
			$ucIPInfo{$sa}{'Port'}=$sp;
		}
		
		#add communication with MalIP
		$temp='('.$sp.')'.$da.'('.$dp.')';
		##print "############".$sasp."\n";
		if ($ucIPInfo{$sa}{'MalIPPort'}) {
					
			if ($ucIPInfo{$sa}{'MalIPPort'} =~ m/$temp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$sa}{'MalIPPort'}=$ucIPInfo{$sa}{'MalIPPort'}." ".$temp;
			}
			
		}
		else {
			$ucIPInfo{$sa}{'MalIPPort'}=$temp;
		}
		
		#for $tmp1 ( keys %ucNetworkInfo ) {
		#	print "###".$tmp1."\n";
		#}
		
		$ucIPInfo{$sa}{'Network'}= &checkForNetwork($sa);
		
		#print $result[$i]." ";
	}
}

sub printucIPInfo {

	$i=1;
	
	foreach my $k (sort {$ucIPInfo{$a}{'Count'} <=> $ucIPInfo{$b}{'Count'} } keys %ucIPInfo) {
		print "##Record".$i."\n";
		print "UcIP: \t\t".$k."\n";
		print "Network: \t".$ucIPInfo{$k}{'Network'}."\n";
		print "Port(s): \t".$ucIPInfo{$k}{'Port'}."\n";
		print "MalIPPort: \t".$ucIPInfo{$k}{'MalIPPort'}."\n";
		print "Count: \t".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "K|$key| N|$ucIPInfo{$key}{'Count'} \n";
		
		$i++;
	}


}

sub printtoFileucIPInfo {

	$i=1;
	
	foreach my $k (sort {$ucIPInfo{$a}{'Count'} <=> $ucIPInfo{$b}{'Count'} } keys %ucIPInfo) {
		print "##Record".$i."\n";
		print "UcIP: \t\t".$k."\n";
		print "Network: \t".$ucIPInfo{$k}{'Network'}."\n";
		print "Port(s): \t".$ucIPInfo{$k}{'Port'}."\n";
		print "MalIPPort: \t".$ucIPInfo{$k}{'MalIPPort'}."\n";
		print "Count: \t".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "K|$key| N|$ucIPInfo{$key}{'Count'} \n";
		
		$i++;
	}


}

&parseUcNetworks("ucNetworkInfo.txt");
&parseMalIPList("http://amada.abuse.ch/blocklist.php?download=ipblocklist","#","Abuse.ch");

### Görev 1: bizim IPlerimiz botnetlist IPleri arasında yer alıyor mu? ###

&searchUcNetworksforMalIP;

### Görev 2: flowu $malInfo 'yu kullanarak filtrele, kalan IPleri $UcIPInfo hashine topla

&populateucIPInfo_src;
&populateucIPInfo_dst;

&printucIPInfo;


exit 0;
