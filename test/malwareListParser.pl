#!/usr/bin/perl

use warnings;
use Net::IP::Match::XS;
use Mail::Sender;

$start_run = time();


#TBD
#Uc bilgileri ve ilgili IP adresleri dosyadan okunup arraylere aktarÄ±lacak

#hash of hash storing network info
my $ucNetworkInfo;

#hash of hash storing malware info
my $malInfo;

#hash of hash storing uc IP info, i.e. IP's found after filtering the flow using malicious IPs, i.e.  IP addresses communicated with malicious IPs
my $ucIPInfo;

sub parseUcNetworks {

	my($filename,$splitchar) = @_;

	open(FILE,$filename) or die "could not open the file";

	$skiplineindex=1;
	while (<FILE>) {
		
		chomp;
		
		#skip first 1 lines
		if ($skiplineindex < 2) {
			$skiplineindex++;
			next;
		}
	
		#split by #
		($ucID,$ucAdi,$ucNetwork,$ucEmail) = split(/[$splitchar]+/);
		
		$ucID =~ s/^\s+//;
		$ucID =~ s/\s+$//;
		$ucAdi =~ s/^\s+//;
		$ucAdi =~ s/\s+$//;
		$ucNetwork =~ s/^\s+//;
		$ucNetwork =~ s/\s+$//;
		$ucEmail =~ s/^\s+//;
		$ucEmail =~ s/\s+$//;
		
		#print $ucID." ".$ucAdi." ".$ucNetwork." ".$ucEmail."\n";
		
		
		#get the number of stored uc networks for an uc (e.g. ULAKNET)
		$ucAdiSize = scalar(keys %{$ucNetworkInfo{$ucAdi}});
		
		$ucNetworkInfo{$ucAdi}{$ucAdiSize}=$ucNetwork;
		
		$ucNetworkInfo{$ucAdi}{'ID'}=$ucID;
		$ucNetworkInfo{$ucAdi}{'Email'}=$ucEmail;
			
	}
	
	close(FILE);

}

sub addMalInfo {

	my($infoName,$info) = @_;

	if ( $malInfo{$malwareIP}{$infoName} ) {
		if ($malInfo{$malwareIP}{$infoName} =~ m/$info/) {
			#match
		} else {
			#no match
			$malInfo{$malwareIP}{$infoName}=$malInfo{$malwareIP}{$infoName}." ".$info;
		}
	}
	else {
		$malInfo{$malwareIP}{$infoName}=$info;
	}

}

sub parseMalIPList {

	my($filename,$splitchar) = @_;
	#system ("wget -O malFile.tmp $filename");

	open(FILE,$filename) or die "could not open the file";
	
	$skiplineindex=1;
	while (<FILE>) {
		
		chomp;
		
		#skip first 1 lines
		if ($skiplineindex < 2) {
			$skiplineindex++;
			next;
		}
	
		#split by splitchar, for abuse.ch #
		($malwareAdi,$malwareIP,$malPort,$sourceName) = split(/[$splitchar]+/);
		
		#trim left and right space
		$malwareIP =~ s/^\s+//;
		$malwareIP =~ s/\s+$//;
		$malwareAdi =~ s/^\s+//;
		$malwareAdi =~ s/\s+$//;
		$malPort =~ s/^\s+//;
		$malPort =~ s/\s+$//;
		$sourceName =~ s/^\s+//;
		$sourceName =~ s/\s+$//;
		
		
		#$malwareAdiSize = scalar(keys %{$malInfo{$malwareAdi}});
		
		if ($malPort eq '-'){
			$malPort=' ';
		}
		
		&addMalInfo('Type',$malwareAdi);
		&addMalInfo('Source',$sourceName);
		&addMalInfo('Port',$malPort);
		
		$malInfo{$malwareIP}{'Count'}=0;
		
		#if ( $malInfo{$malwareIP}{'Count'} ) {
		#	$malInfo{$malwareIP}{'Count'}++;
		#}
		#else {
		#	$malInfo{$malwareIP}{'Count'}=1;
		#}
		#$malInfo{$malwareIP}{'Count'} = $malInfo{$malwareIP}{'Count'}++;
		#$malInfo{$malwareIP}{'Port'}= $malInfo{$malwareIP}{'Port'}." ";
		
	}
	
	close(FILE);
	
	#remove temp file
	#system ("rm malFile.tmp");
}



sub searchUcNetworksforMalIP {

	$numberOfDetection=0;
	for $i ( keys %ucNetworkInfo ) {
		for $j ( keys %{$ucNetworkInfo{$i}} ) {
			for $k ( keys %malInfo ) {
				
				if (match_ip( $k , $ucNetworkInfo{$i}{$j} )) {
					print "\n\n### Bad IP DETECTED!!!\n";
					print "Related Uc is ".$i."\n";
					print "Malicious IP: ".$k."\n";
					print "Port(s):".$malInfo{$k}{'Port'}."\n";
					print "Type(s): ".$malInfo{$k}{'Type'}."\n";
					print "Source(s): ".$malInfo{$k}{'Source'}."\n";
					print "Count: ".$malInfo{$k}{'Count'}."\n";
					$numberOfDetection++;
				}
				else {
					#Not detected
				}
				
			}
		}
	}
	print "\n\n### ";
	print $numberOfDetection." IP's are found.\n";

}

sub checkForNetwork {

	my($IP) = @_;
	
	$result="NoNetwork";
	
	FIRSTLOOP: for $tmp1 ( keys %ucNetworkInfo ) {
		for $tmp2 ( keys %{$ucNetworkInfo{$tmp1}} ) {
				if ($tmp2 eq 'ID' or $tmp2 eq 'Email' ) {
					next;
				}
				#print "####".$tmp1."\n";
				if (match_ip( $IP , $ucNetworkInfo{$tmp1}{$tmp2} )) {
					$result=$tmp1;
					last FIRSTLOOP;
					last;
				}
				#else {
				#	$result="NoNetwork";
				#}
		}
	}
	##print "####".$ucNetworkInfo{'rehabilitasyon'}{0}."\n";

	$result;
}

sub populateucIPInfo_dst {

	my($flowPath) = @_;

	open(WFILE, ">tmp.filter") or die "could not open file to write";
	print WFILE "src ip in [";
	for $k ( keys %malInfo ) {
	
		print WFILE " ".$k." ";

	}
	print WFILE "]";
	close(WFILE);
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%da' `;
	
	@result = `nfdump -R $flowPath -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	for $i (1..$#result-4){
		
		$result[$i] =~ s/^\s+//;
		$result[$i] =~ s/\s+$//;
		#split
		($sa,$sp,$da,$dp) = split(/\|/,$result[$i]);

		#chomp $result[$i];
		$sa =~ s/^\s+//;
		$sa =~ s/\s+$//;
		$da =~ s/^\s+//;
		$da =~ s/\s+$//;
		$sp =~ s/^\s+//;
		$sp =~ s/\s+$//;
		$dp =~ s/^\s+//;
		$dp =~ s/\s+$//;
		
		##print "sa,sp = ".$sa.",".$sp."\n";
		
		#increase count for ucIP
		if ($ucIPInfo{$da}{'Count'}) {
			$ucIPInfo{$da}{'Count'}++;
		}
		else {
			$ucIPInfo{$da}{'Count'}=1;
		}
		
		#add ucIP port info
		if ($ucIPInfo{$da}{'Port'}) {
			if ($ucIPInfo{$da}{'Port'} =~ m/$dp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$da}{'Port'}=$ucIPInfo{$da}{'Port'}." ".$dp;
			}
			
		}
		else {
			$ucIPInfo{$da}{'Port'}=$dp;
		}
		
		#add communication with MalIP
		$temp='('.$dp.')'.$sa.'('.$sp.')';
		##print "############".$sasp."\n";
		if ($ucIPInfo{$da}{'MalIPPort'}) {
					
			if ($ucIPInfo{$da}{'MalIPPort'} =~ m/$temp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$da}{'MalIPPort'}=$ucIPInfo{$da}{'MalIPPort'}." ".$temp;
			}
			
		}
		else {
			$ucIPInfo{$da}{'MalIPPort'}=$temp;
		}
		
		#for $tmp1 ( keys %ucNetworkInfo ) {
		#	print "###".$tmp1."\n";
		#}
		
		$ucIPInfo{$da}{'Network'}= &checkForNetwork($da);
		
		#print $result[$i]." ";
	}
	
	
	#foreach $k (sort { $ucIPInfo{$a} cmp $ucIPInfo{$b} } keys %ucIPInfo) { print "$food is $food_color{$food}.\n"; }
	
	
	
	
	
	#for $k ( keys %ucIPInfo ){
		#print "##Record".$i."\n";
		#print "UcIP: \t\t".$k."\n";
		#print "Network: \t".$ucIPInfo{$k}{'Network'}."\n";
		#print "Port(s): \t".$ucIPInfo{$k}{'Port'}."\n";
		#print "MalIPPort: \t".$ucIPInfo{$k}{'MalIPPort'}."\n";
		#print "Count: \t".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "ucIPInfo{'".$k."'}{'Network'}= ".$ucIPInfo{$k}{'Network'}."\n";
		#print "ucIPInfo{'".$k."'}{'Port'}= ".$ucIPInfo{$k}{'Port'}."\n";
		#print "ucIPInfo{'".$k."'}{'MalIPPort'}= ".$ucIPInfo{$k}{'MalIPPort'}."\n";
		#print "ucIPInfo{'".$k."'}{'Count'}= ".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "\n";
		#$i++;
	#}
	
	#print "\n";

}

sub populateucIPInfo_src {

	my($flowPath) = @_;

	open(WFILE, ">tmp.filter") or die "could not open file to write";
	print WFILE "dst ip in [";
	for $k ( keys %malInfo ) {
	
		print WFILE " ".$k." ";

	}
	print WFILE "]";
	close(WFILE);
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%da' `;
	
	@result = `nfdump -R $flowPath -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	#@result = `nfdump -r /home/emre/Desktop/22haziran_flow_analysis/data/nfcapd.201106211000 -f tmp.filter -o 'fmt:%sa|%sp|%da|%dp' `;
	
	for $i (1..$#result-4){
		
		$result[$i] =~ s/^\s+//;
		$result[$i] =~ s/\s+$//;
		#split
		($sa,$sp,$da,$dp) = split(/\|/,$result[$i]);

		#chomp $result[$i];
		$sa =~ s/^\s+//;
		$sa =~ s/\s+$//;
		$da =~ s/^\s+//;
		$da =~ s/\s+$//;
		$sp =~ s/^\s+//;
		$sp =~ s/\s+$//;
		$dp =~ s/^\s+//;
		$dp =~ s/\s+$//;
		
		##print "sa,sp = ".$sa.",".$sp."\n";
		
		#increase count for ucIP
		if ($ucIPInfo{$sa}{'Count'}) {
			$ucIPInfo{$sa}{'Count'}++;
		}
		else {
			$ucIPInfo{$sa}{'Count'}=1;
		}
		
		#add ucIP port info
		if ($ucIPInfo{$sa}{'Port'}) {
			if ($ucIPInfo{$sa}{'Port'} =~ m/$sp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$sa}{'Port'}=$ucIPInfo{$sa}{'Port'}." ".$sp;
			}
			
		}
		else {
			$ucIPInfo{$sa}{'Port'}=$sp;
		}
		
		#add communication with MalIP
		$temp='('.$sp.')'.$da.'('.$dp.')';
		##print "############".$sasp."\n";
		if ($ucIPInfo{$sa}{'MalIPPort'}) {
					
			if ($ucIPInfo{$sa}{'MalIPPort'} =~ m/$temp/) {
				#match
			} else {
				#no match
				$ucIPInfo{$sa}{'MalIPPort'}=$ucIPInfo{$sa}{'MalIPPort'}." ".$temp;
			}
			
		}
		else {
			$ucIPInfo{$sa}{'MalIPPort'}=$temp;
		}
		
		#for $tmp1 ( keys %ucNetworkInfo ) {
		#	print "###".$tmp1."\n";
		#}
		
		$ucIPInfo{$sa}{'Network'}= &checkForNetwork($sa);
		
		#print $result[$i]." ";
	}
}

sub printmalInfo {

	$i=1;
	
	foreach $k ( keys %malInfo) {
		print "##Record".$i."\n";
		print "UcIP:".$k."\n";
		print "Type:".$malInfo{$k}{'Type'}."\n";
		print "Source:".$malInfo{$k}{'Source'}."\n";
		print "Port(s):".$malInfo{$k}{'Port'}."\n";
		print "Count:".$malInfo{$k}{'Count'}."\n";
		
		#print "K|$key| N|$ucIPInfo{$key}{'Count'} \n";
		
		$i++;
	}


}

sub printucNetworkInfo {

	$i=1;
	
	foreach $k ( keys %ucNetworkInfo) {
		for $l ( keys %{$ucNetworkInfo{$k}} ) {
			if ($l eq 'ID' or $l eq 'Email' ) {
				next;
			}
			print "##Record".$i."\n";
			print "Network Name:".$k."\n";
			print "Network:".$ucNetworkInfo{$k}{$l}."\n";
			print "ID:".$ucNetworkInfo{$k}{'ID'}."\n";
			print "Email:".$ucNetworkInfo{$k}{'Email'}."\n";
			$i++;
			#print $l." \n";
		}
		
		#print $tmp367." \n";
		
		
	}


}

sub skipUnrelatedKeys {

	my($l) = @_;

	if ($l eq 'ID' or $l eq 'Email' ) {
		next;
	}

}


sub printucIPInfo {

	$i=1;
	
	foreach my $k (sort {$ucIPInfo{$a}{'Count'} <=> $ucIPInfo{$b}{'Count'} } keys %ucIPInfo) {
		print "##Record".$i."\n";
		print "UcIP: \t\t".$k."\n";
		print "Network: \t".$ucIPInfo{$k}{'Network'}."\n";
		print "Port(s): \t".$ucIPInfo{$k}{'Port'}."\n";
		print "MalIPPort: \t".$ucIPInfo{$k}{'MalIPPort'}."\n";
		print "Count: \t".$ucIPInfo{$k}{'Count'}."\n";
		
		#print "K|$key| N|$ucIPInfo{$key}{'Count'} \n";
		
		$i++;
	}


}

sub printucIPInfo_toFile {

	for $k ( keys %ucNetworkInfo ) {

		$i=1;
		open(WFILE, ">output/".$ucNetworkInfo{$k}{'ID'}) or die "could not open file to write";
	
		foreach my $l (sort {$ucIPInfo{$a}{'Count'} <=> $ucIPInfo{$b}{'Count'} } keys %ucIPInfo) {
		
			if ($ucIPInfo{$l}{'Network'} eq $k) {
			
				print WFILE "##Record".$i."\n";
				print WFILE "UcIP: \t\t".$l."\n";
				print WFILE "Network: \t".$ucIPInfo{$l}{'Network'}."\n";
				print WFILE "Port(s): \t".$ucIPInfo{$l}{'Port'}."\n";
				print WFILE "(kaynak_port)maliciousIP(hedef_port): \t".$ucIPInfo{$l}{'MalIPPort'}."\n";
				print WFILE "Count: \t".$ucIPInfo{$l}{'Count'}."\n";
				print WFILE "\n";
				
				$i++;
			}
		
		}
		
		close(WFILE);
		
		# send mail to $ucNetworkInfo{$k}{'Email'}
		
	}


}


sub ucSendMail {

# boÅ olmayan dosyalarÄ± listele, dosya adlarÄ±nÄ± ucBilgileri arrayÄ±nda bul, iletiÅim bilgilerini Ã§ek, epostaya ilgili dosyadaki bilgileri gÃ¶nder.

	@dosyaListesi = `find /home/emre/Desktop/17agustos/output ! -size 0k | awk -F '/' '{print \$7}'`;
	
	
	for $i (1..$#dosyaListesi){
		for $tmp1 ( keys %ucNetworkInfo ) {
			#for $tmp2 ( keys %{$ucNetworkInfo{$tmp1}} ) {
			
			if ($ucNetworkInfo{$tmp1}{'ID'}==$i) {
			
			
			
				$sender = new Mail::Sender{smtp => 'mail.ulakbim.gov.tr', from => 'deneme@ulakbim.gov.tr', charset => 'utf-8'};
				$sender->MailFile({to => 'emre@ulakbim.gov.tr',
					subject => 'HaftalÄ±k zararlÄ± aktivite bilgisi',
					msg => "AÅaÄÄ±da bazÄ± bilgiler yer almaktadÄ±r.\n\n AlÄ±cÄ±: ".$ucNetworkInfo{$tmp1}{'Email'}." \n AlÄ±cÄ± ID: ".$ucNetworkInfo{$tmp1}{'ID'}." \n\n Ä°yi ÃalÄ±Åmalar, \n ULAKBÄ°M",
					file => '/home/emre/Desktop/17agustos/output/'.$i});
					
				print ".";
			
						
			}
					
		}
	}
	
	print "\n";

}

# (1) quit unless we have the correct number of command-line args
$num_args = $#ARGV + 1;
if ($num_args != 1) {
  print "\nUsage: malwareListParser.pl flowPath\n";
  exit;
}

# (2) we got two command line args, so assume they are the
# first name and last name
$flowPath=$ARGV[0];

print "Parsing ucBilgileri...\n";
&parseUcNetworks("UcBilgileri"," ");

print "Parsing malware source files...\n";
&parseMalIPList("MalOutput.amada"," ");
&parseMalIPList("MalOutput.malc0de"," ");
&parseMalIPList("MalOutput.SpyEyeTracker"," ");


#&printucNetworkInfo;

#&printmalInfo;

### GÃ¶rev 1: bizim IPlerimiz botnetlist IPleri arasÄ±nda yer alÄ±yor mu? ###

print "Searching for malicious ucNetworks\n";
&searchUcNetworksforMalIP;

### GÃ¶rev 2: flowu $malInfo 'yu kullanarak filtrele, kalan IPleri $UcIPInfo hashine topla

##/home/emre/Desktop/22haziran_flow_analysis/data/

print "Populating ucIPInfo...\n";
&populateucIPInfo_src($flowPath);
&populateucIPInfo_dst($flowPath);

print "Printing ucIPInfo to file...\n";
&printucIPInfo_toFile;

print "Sending mail\n\n";
&ucSendMail;


my $end_run = time();
my $run_time = $end_run - $start_run;
print "Job took $run_time seconds\n";


exit 0;
